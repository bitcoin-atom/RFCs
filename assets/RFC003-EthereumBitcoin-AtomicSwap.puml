' DIAGRAM #########################################
' RFC003 atomic swap
' #################################################
@startuml
' #################################################
' SETTINGS: color settings of diagram
' #################################################
skinparam sequence {
	BorderColor black
	ArrowColor black
	ActorBorderColor black
	LifeLineBorderColor black
	LifeLineBackgroundColor white
	
	ParticipantBorderColor black
	ParticipantBackgroundColor white
	ParticipantFontColor black
	
	ActorBackgroundColor white
	ActorFontColor black
}
' #################################################
' ACTORS
' #################################################
actor Alice
participant "Alice\nComit-Node" as AC #lightgreen
participant "Alice\nETH-Client" as AETH #lightcyan
participant "Alice\nBTC-Client" as ABTC #lightgoldenrodyellow
participant "Ethereum\nNetwork" as ETH #lightcyan
participant "Bitcoin\nNetwork" as BTC #lightgoldenrodyellow
participant "Bob\nBTC-Client" as BBTC #lightgoldenrodyellow
participant "Bob\nETH-Client" as BETH #lightcyan
participant "Bob\nComit-Node" as BC #lightgreen
actor Bob


' #################################################
' DIAGRAM
' #################################################
Bob->BC: create comit link
BC->Bob: link for trade
Bob->Alice: comit link, 10ETH to 1BTC
note left #white
	Trade is set up so:
	Alice has 10 ETH 
	  and gets 1 BTC.
	Bob has 1BTC 
	  and gets 10 ETH.
end note
Alice->AC: refund address
Alice->AC: send swap request
AC->AC: generate secret
AC->AC: hash secret, h(s)
note left #white
	The comit node
	handles the secret 
	creation and hashing.
end note
AC->BC: swap request, incl. h(s)
BC->Bob: new swap request
Bob->BC: accept swap request
BC->ETH: start listening for ETH TXs
BC->AC: accept swap request
AC->ETH: start listening for ETH TXs
AC->Alice: fund action
Alice->AC: fund ETH
AC->AC: compile smart contract
AC->AETH: send TX (contract deployment)
AETH->ETH: send TX (contract deployment)
ETH->ETH: TX in new block
ETH->BETH: new ETH block
ETH->AETH: new ETH block
AETH->AC: Alice's comit node notices funded ETH
AC->BTC: start listening for BTC TXs
AC->Alice: refund available
BETH->BC: Bob's comit node notices funded ETH
BC->BTC: start listening for BTC TXs
BC->Bob: fund available
Bob->BC: fund BTC
BC->BC: prepare BTC TX
BC->BBTC: send fund BTC TX
BTC->BTC: TX in new block
BTC->BBTC: new BTC block
BTC->ABTC: new BTC block
BBTC->BC: Bob's comit node notices funded BTC
BC->Bob: refund available
ABTC->AC: Alice's comit node notices funded BTC
AC->Alice: redeem available
Alice->AC: redeem BTC
AC->AC: prepare redeem TX with h(s)
AC->ABTC: send redeem TX
ABTC->BTC: send TX
BTC->BTC: TX in new block
note right #white
	Secret publicly
	available on BTC
	blockchain.
end note
BTC->ABTC: new BTC block
note left #white
	Alice got 1 BTC.
end note
BTC->BBTC: new BTC block
ABTC->AC: Alice's comit node notices BTC redeem
AC->Alice: just refund available
BBTC->BC: Bob's comit node notices BTC redeem
note right #white
	Bob's comit node
	retrieves the secret.
end note
BC->Bob: redeem available
Bob->BC: redeem
BC->BC: prepare BTC TX
BC->BETH: send redeem TX
BETH->ETH: send TX
note left #white
	Smart contract hashes the 
	given secret and matches
	it against the hash it has.
end note
ETH->ETH: TX in new block
ETH->AETH: new ETH block
ETH->BETH: new ETH block
note right #white
	Bob got 10 ETH.
end note
AETH->AC: Alice's comit node notices ETH redeem
AC->Alice: swap complete
BETH->BC: Bob's comit node notices ETH redeem
BC->Bob: swap complete

@enduml