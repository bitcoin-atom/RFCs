' DIAGRAM #########################################
' RFC003 Bitcoin deployment
' #################################################
@startuml
' #################################################
' SETTINGS: color settings of diagram
' #################################################
skinparam sequence {
	BorderColor black
	ArrowColor black
	ActorBorderColor black
	LifeLineBorderColor black
	LifeLineBackgroundColor white
	
	ParticipantBorderColor black
	ParticipantBackgroundColor white
	ParticipantFontColor black
	
	ActorBackgroundColor white
	ActorFontColor black
}
' #################################################
' ACTORS
' #################################################
actor Alice
participant "Alice\nComit-Node" as AC
participant "Bitcoin\nLedger" as Alpha
participant "Bob\nComit-Node" as BC
actor Bob

' allow parallelism
!pragma teoz true

' #################################################
' DIAGRAM
' #################################################
Alice->AC: send swap request
AC->AC: generate secret
AC->AC: hash secret
AC->AC: prepare refund identity
AC->AC: hash refund identity
AC->BC: send swap request
note left #white
{
  "type": "SWAP",
  "headers": {
    "alpha_ledger": {
      "value": "bitcoin",
      "parameters": { "network": "mainnet" }
    },
    "beta_ledger": {...},
    "alpha_asset": {
      "value": "bitcoin",
      "parameters": { "quantity": "100000000" }
    },
    "beta_asset": {...},
    "protocol": {
        "value" : "comit-rfc-003",
        "parameters" : {
            "hash_function" : "SHA-256" }
    }
  },
  "body": {
    "alpha_ledger_refund_identity": "1925a...",
    "alpha_expiry": 1552,
    "secret_hash" : "1f69c...",
    ...
  },
}
end note
BC->Bob: new swap request
Bob->BC: accept swap request
BC->BC: prepare redeem identity
BC->BC: hash redeem identity
BC->AC: accept swap request
note right #white
{
  "type": "SWAP",
  "headers": {
    "alpha_ledger": {
      "value": "bitcoin",
      "parameters": { "network": "mainnet" }
    },
    "beta_ledger": {...},
    "alpha_asset": {
      "value": "bitcoin",
      "parameters": { "quantity": "100000000" }
    },
    "beta_asset": {...},
    "protocol": {
        "value" : "comit-rfc-003",
        "parameters" : { "hash_function" :
            "SHA-256" }
    }
  },
  "body": {
    "alpha_ledger_refund_identity": "1925a...",
    "alpha_expiry": 1552,
    "secret_hash" : "1f69c...",
    **"alpha_ledger_redeem_identity": "1925b...",**
    ...
  },
}
end note
BC->BC: calculate script address
note left #white
script address includes (hashed):
  contract_script
  hash of secret
  hash of redeem_identity
  hash of refund_identity
end note
& AC->AC: calculate script address
note left #white
script address includes (hashed):
  contract_script
  hash of secret
  hash of redeem_identity
  hash of refund_identity
end note
BC->Alpha: monitor deployment of HTLC on Bitcoin
& AC->Alpha: monitor deployment of HTLC on Bitcoin
note left #white
	Both Alice and Bob know all parameters.
	Bitcoin scripts are represented by a
	specially calculated bitcoin address.
	Thus, monitoring it just done by looking
	for this address in incoming new blocks.
end note
AC->Alice: fund action
Alice->AC: fund
AC->AC: prepare TX with\n  contract_script,\n  100000000 sat
AC-->Alice: prepared TX
Alice->Alpha: send TX
Alpha->Alpha: TX in new block
AC->Alpha: Alice's comit node notices\nfunded HTLC on Alpha
& BC->Alpha: Bob's comit node notices\nfunded HTLC on Alpha

@enduml